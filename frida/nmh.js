function HookAndLog(addr, name, callbacks) {
    console.log("[+] Hooking", name, "@", addr)
    Interceptor.attach(addr, callbacks)
}

var nativeFunctions = ["write", "read", "getppid"]
const callContext = {};
nativeFunctions.forEach(f => {
    var name = f
    var addr = Module.findExportByName("libSystem.B.dylib", name)
    HookAndLog(addr, name, {
        onEnter(args) {
            try {
                // const callerFunction = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress)[0].toString()
                switch(name) {
                    case "write":
                        let fd = args[0]
                        let buf = args[1]
                        let size = args[2].toInt32()
                        console.log("[write] FD:",fd,"size:",size,"buf:\n", Memory.readByteArray(buf, size))
                        break;
                    case "read":
                        callContext[Thread.id] = {fd: args[0], buf: args[1], attemptReadSize: args[2].toInt32()}
                        break;
                    default:
                        console.log("[-->] entering " + name)
                  }
            } catch (error) {
                console.log(error)
            }
        },
        onLeave(retval) {
            try {
                const callerFunction = Thread.backtrace(this.context, Backtracer.ACCURATE).map(DebugSymbol.fromAddress)[0].toString()
                switch(name) {
                    case "write":
                        break;
                    case "read":
                        let ctx = callContext[Thread.id]
                        let actualSize = retval.toInt32()
                        console.log("[read] FD:",ctx.fd,"desired size:",ctx.attemptReadSize, "actual size:", actualSize,"buf:\n",Memory.readByteArray(ctx.buf, actualSize))
                        break;
                    default:
                        console.log("[<--] exiting " + name + " with retval:" + retval)
                }
            } catch (error) {
                console.log(error)
            }
        }
    })
})