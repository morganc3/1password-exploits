// function from https://codeshare.frida.re/@lichao890427/device--parameter/
function getExportFunction(type, name, ret, args) {
    var nptr;
    nptr = Module.findExportByName(null, name);
    if (nptr === null) {
        console.log("cannot find " + name);
        return null;
    } else {
        if (type === "f") {
            var funclet = new NativeFunction(nptr, ret, args);
            if (typeof funclet === "undefined") {
                console.log("parse error " + name);
                return null;
            }
            return funclet;
        } else if (type === "d") {
            var datalet = Memory.readPointer(nptr);
            if (typeof datalet === "undefined") {
                console.log("parse error " + name);
                return null;
            }
            return datalet;
        }
    }
}

// Uncomment to log information about all calls to SecItemCopyMatching
// logs query dictionary and return values

/*
var SecItemCopyMatching = getExportFunction("f", "SecItemCopyMatching", "int", ["pointer", "pointer"]);
Interceptor.attach(SecItemCopyMatching, {
    onEnter(args){
        this.ref = args[1];
        console.log('Logging SecItemCopyMatching call arguments:');
        const dict = ObjC.Object(args[0]);
        console.log(dict);
    },
    onLeave(retval){
        console.log("Logging return value of SecItemCopyMatching:");
        console.log(ObjC.Object(this.ref.readPointer()));
    }
})
*/

// Uncomment to log information about all calls to SecItemCopyMatching that are querying for class = "keys"
// Logs full query dict and decodes "atag" (kSecAttrApplicationTag) string if present

var SecItemCopyMatching = getExportFunction("f", "SecItemCopyMatching", "int", ["pointer", "pointer"]);
Interceptor.attach(SecItemCopyMatching, {
    onEnter(args){
        const dict = ObjC.Object(args[0]);
        var _class = dict.objectForKey_("class");
        if (_class == "keys"){
            this.ref = args[1];
            console.log('Logging SecItemCopyMatching call arguments for query with class = keys:');
            console.log(dict);
            var atag = dict.objectForKey_("atag");
            if(atag)  {
                console.log("application tag: " + atag.bytes().readUtf8String(atag.length()));
            }
        }
    },
    onLeave(retval){
        if (this.ref){
            console.log("Logging return value of SecItemCopyMatching:");
            console.log(ObjC.Object(this.ref.readPointer()));
        }
    }
})

// Uncomment to log information about all calls to SecKeyCreateDecryptedData

/*
var SecKeyCreateDecryptedData = getExportFunction("f", "SecKeyCreateDecryptedData", "pointer", 
    ["pointer", "pointer", "pointer", "pointer"]);

Interceptor.attach(SecKeyCreateDecryptedData, {
    onEnter(args){
        console.log('Logging SecKeyCreateDecryptedData call arguments:');
        console.log("\tkey: " + ObjC.Object(args[0]));
        console.log("\talgorithm: " + ObjC.Object(args[1]));
        console.log("\tciphertext: " + ObjC.Object(args[2]));
    },
    onLeave(retval){
        console.log("Logging cleartext return value of SecKeyCreateDecryptedData:");
        console.log("\tcleartext: " +  ObjC.Object(retval));
    }
})
*/
